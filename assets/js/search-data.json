{
  
    
        "post0": {
            "title": "Best Day To Trade",
            "content": "In this article, I want to systematically investigate the tendency for different Forex pairs and CFDs to perform better on certain days of the week and month. I will do so by backtesting a simple strategy whereby we buy on the open of a particular day and exit on the close of the same day. We will then sum our performances over the years in question. . We will break our study into 2: . choosing days of the week (Monday through Friday) to see if each of our chosen instruments have preferences for one over tha other; and, | choosing days of the month for the same reason as stated above. | . Some questions on our minds as we explore are: . Do all forex pairs have best trading days of the week and month? | Are these best trading days the same across all pairs or are they different? | can we say the same for CFDs? | . Best Day of the week . Below are different bar charts that represent the cumulative returns if we bought each pair on the open and exited on the close of the same day. . from SisengAI import * i = &#39;EURUSD&#39; df = getData(i) df[&#39;ret&#39;] = df.Close.pct_change() df[&#39;dayOfWeek&#39;] = df.index.day_name() dfDayRets = df.groupby(&#39;dayOfWeek&#39;)[&#39;ret&#39;].sum().to_frame() dfDayRets.reset_index(inplace=True) cats = [&#39;Sunday&#39;,&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] dfDayRets[&#39;dayOfWeek&#39;] = pd.Categorical(dfDayRets[&#39;dayOfWeek&#39;], categories=cats, ordered=True) dfDayRets = dfDayRets.sort_values(&#39;dayOfWeek&#39;) plt.bar(dfDayRets.dayOfWeek, dfDayRets.ret) # Naming the x and y axis plt.ylabel(&#39;total returns&#39;) plt.xlabel(&#39;day of the week&#39;) # Giving the title for the plot plt.title(f&#39;best day to trade {i}&#39;) # Displaying the bar plot plt.show() . The size of the bars can tell us so much about the strategy. The longer the bar is, the more profitable the strategy on that day. The day with the longest bar is best for longs (if the value is positive) or shorts (if the value is negative). . What we can see in the chart above is the fact that Thursdays tend to go long for the EURUSD. So if you took your time to buy on the open of the market on Thursdays and exiting the longs at the close of the day, you would be in profit at the end of the period being considered. . Fridays are best for shorts. The other days are more of a mixed bag and I would prefer to check other currency pairs or CFDs I am watching to see if they have better days to help me fill up the missing days on this pair. . i = &#39;GBPCHF&#39; df = getData(i) df[&#39;ret&#39;] = df.Close.pct_change() df[&#39;dayOfWeek&#39;] = df.index.day_name() dfDayRets = df.groupby(&#39;dayOfWeek&#39;)[&#39;ret&#39;].sum().to_frame() dfDayRets.reset_index(inplace=True) cats = [&#39;Sunday&#39;,&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] dfDayRets[&#39;dayOfWeek&#39;] = pd.Categorical(dfDayRets[&#39;dayOfWeek&#39;], categories=cats, ordered=True) dfDayRets = dfDayRets.sort_values(&#39;dayOfWeek&#39;) plt.bar(dfDayRets.dayOfWeek, dfDayRets.ret) # Naming the x and y axis plt.ylabel(&#39;total returns&#39;) plt.xlabel(&#39;day of the week&#39;) # Giving the title for the plot plt.title(f&#39;best day to trade {i}&#39;) # Displaying the bar plot plt.show() . From what we can see above, if I were to trade this strategy, GBPCHF is best for shorts on Thursdays and Fridays. The Longs are not worth the trouble in my opinion. I will seek out other instruments for those days that are lacking in good trading days. . i = &#39;NAS100&#39; df = getData(i) df[&#39;ret&#39;] = df.Close.pct_change() df[&#39;dayOfWeek&#39;] = df.index.day_name() dfDayRets = df.groupby(&#39;dayOfWeek&#39;)[&#39;ret&#39;].sum().to_frame() dfDayRets.reset_index(inplace=True) cats = [&#39;Sunday&#39;,&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] dfDayRets[&#39;dayOfWeek&#39;] = pd.Categorical(dfDayRets[&#39;dayOfWeek&#39;], categories=cats, ordered=True) dfDayRets = dfDayRets.sort_values(&#39;dayOfWeek&#39;) plt.bar(dfDayRets.dayOfWeek, dfDayRets.ret) # Naming the x and y axis plt.ylabel(&#39;total returns&#39;) plt.xlabel(&#39;day of the week&#39;) # Giving the title for the plot plt.title(f&#39;best day to trade {i}&#39;) # Displaying the bar plot plt.show() . For the NAS100, it seems from the chart above that long-only strategies would be the best in handling it. Buying on Mondays and letting it ride through Thursday might be one of the best ways to trade this. However I wouldn&#39;t commit funds to any of these strategies yet, as we nned to fully backtest this in-sample and out-sample and bring our some key figures like percentage wins vs loses, Sharpe ratio etc. . Best Day of the Month . What about the possibility of a best trading day of the Month? Larry Williams used the same ideas to trade in the commodities market. As we go through the charts generated below, it would be best to have the same mindset that led us through all the charts for the best day of the week studies above. . i = &quot;GBPJPY&quot; df = getData(i) df[&#39;ret&#39;] = df.Close.pct_change() df[&#39;dayOfWeek&#39;] = df.index.day#_name() dfDayRets = df.groupby(&#39;dayOfWeek&#39;)[&#39;ret&#39;].sum().to_frame() plt.bar(dfDayRets.index, dfDayRets.ret) # Namimg the x and y axis plt.ylabel(&#39;total returns&#39;) plt.xlabel(&#39;day of the week&#39;) # Giving the title for the plot plt.title(f&#39;best day to trade {i}&#39;) # Displaying the bar plot plt.show() . From the chart of the GBPJPY above, we can say that the overall best day for longs is the 31st of any month and the best day for shorts are 4th. . We will list the rest of the instruments considered in the appropraite appendix below for you to check and draw your conclusions. . Appendix 1: Best day of the week to trade on a list of selected FOREX pairs and CFDs . Below are bar charts of the study carried out above on more instruments for your perusal. . for i in tqdm(sym, desc=&#39;preparing plots&#39;): df = getData(i) df[&#39;ret&#39;] = df.Close.pct_change() df[&#39;dayOfWeek&#39;] = df.index.day_name() dfDayRets = df.groupby(&#39;dayOfWeek&#39;)[&#39;ret&#39;].sum().to_frame() dfDayRets.reset_index(inplace=True) cats = [&#39;Sunday&#39;,&#39;Monday&#39;, &#39;Tuesday&#39;, &#39;Wednesday&#39;, &#39;Thursday&#39;, &#39;Friday&#39;] dfDayRets[&#39;dayOfWeek&#39;] = pd.Categorical(dfDayRets[&#39;dayOfWeek&#39;], categories=cats, ordered=True) dfDayRets = dfDayRets.sort_values(&#39;dayOfWeek&#39;) plt.bar(dfDayRets.dayOfWeek, dfDayRets.ret) # Naming the x and y axis plt.ylabel(&#39;total returns&#39;) plt.xlabel(&#39;day of the week&#39;) # Giving the title for the plot plt.title(f&#39;best day to trade {i}&#39;) # Displaying the bar plot plt.show() . Appendix 2: Best day of the month to trade on a list of selected FOREX pairs and CFDs . Below are bar charts of the study carried out above on more instruments for your perusal. . for i in tqdm(sym, desc=&#39;preparing plots&#39;): df = getData(i) df[&#39;ret&#39;] = df.Close.pct_change() df[&#39;dayOfWeek&#39;] = df.index.day#_name() dfDayRets = df.groupby(&#39;dayOfWeek&#39;)[&#39;ret&#39;].sum().to_frame() plt.bar(dfDayRets.index, dfDayRets.ret) # Namimg the x and y axis plt.ylabel(&#39;total returns&#39;) plt.xlabel(&#39;day of the week&#39;) # Giving the title for the plot plt.title(f&#39;best day to trade {i}&#39;) # Displaying the bar plot plt.show() . Conclusion . We have come to the end of our study. This writeup is strictly for educational puposes only. Past performance is not an indication of future performances. Please do conduct your own research and come to your own personal conclusions before committing funds to any trading strategy. . May the pips be with you! .",
            "url": "https://theafricanquant.github.io/AnodaAttempt/algorithmic%20trading/trading%20day/week/month/long/short/exit/entry/forex/cfd/pairs/2021/11/09/bestDayStudy.html",
            "relUrl": "/algorithmic%20trading/trading%20day/week/month/long/short/exit/entry/forex/cfd/pairs/2021/11/09/bestDayStudy.html",
            "date": " • Nov 9, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://theafricanquant.github.io/AnodaAttempt/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://theafricanquant.github.io/AnodaAttempt/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Ricky Macharm holds a master in Financial Engineering and is also proficient in deploying machine learning models. He is the founder of SisengAI 1. . This is a site that is about algorithmic trading and NLP for low resourced languages. &#8617; . |",
          "url": "https://theafricanquant.github.io/AnodaAttempt/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://theafricanquant.github.io/AnodaAttempt/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}